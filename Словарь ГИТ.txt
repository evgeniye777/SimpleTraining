"mkdir 'name'" - новая папка
"cd 'name'" - переход в дирикторию (cd Папка1\Папка2\Папка3)
"cd.." - переход выше по дириктории
"echo 'текст' > 'name'" - создание новой записи в файле или создание нового файла с этой записью
"echo 'текст' >> 'name'" - добавление записи к файлу
"setx 'name' 'text'" - создание переменной среды (-m добавить в конце для системных переменных среды)
"cd '%name%'" - переход в дирикторию по переменной среды
"dir /a" - просмотр содержимого в находящейся дириктории ('ls -a' - для Линукс)

"https://www.celitel.info/klad/nhelp/helpbat.php?dcmd=main" - Полезный справочник
"https://code-basics.com/ru" - изучение базы языков
Шпаргалка по языкам	https://cheatography.com/programming/

Spring	"https://spring-projects.ru/guides/"
Гит	"https://ru.hexlet.io/courses/intro_to_git"
ProGit	"https://git-scm.com/book/ru/v2"
"del 'name'" - удаление файлов в находящейся дириктории (если указать название папки, то папка останется а содержимое удалится)
"rmdir /s" - удаление всей папки и её содержимого (если папка пуста то сработает и без '/s')
"type 'name'" - просмотр содержимого файлов (cat в линуксе)


ГИТ:
"git config --list --show-origin" - информация о главной дириктории ГИТ
"git config --list" - просто проверить настройки
"git config --global init.defaultBranch main" - установить имя main для текущей ветки по умолчанию???
"git --version" - отображает версию ГИТ
"git --config"или"git --info" - информация некоторых команд ГИТ
"git --help"или"git --help -a"или"git --help -g" - информация о подкомандах ГИТ
"gid 'команда' -h" - список опций
"git config --global user.name 'name'" - установка имени пользователя дириктории (глобальная настройка (или без '--global')???) (обязатель если отстутствует)
"git config --global user.email 'email'" - установка почты пользователя дириктории (глобальная настройка (или без '--global')???) (обязатель если отстутствует)
"git init" - инициализация гит (в той дириктории где вызвана эта команда)
"git status" - состояние гит
"git add 'name'" - добавление в индекс нового файла или папки для комита (можно указать * или . для всех)
"git commit -m 'label'" - создание коммита для собранного индекса с пометкой
"git commit name -m 'label'" - объедененная команда add и commit (name - название файла или папки, label - название коммита)
"git commit -am 'label'" - объедененная команда 'add .' и commit (name - название файла или папки, label - название коммита) (добавляет в индекс и коммитит сразу все изменения, которы отслеживаются)
"git restore 'name'" - востановление удаленного файла или папки которая удалена (при условии если папка/файл - отслеживаемые (git add)) (можно указать * или . для всех) (Также данная команда отменяет изменения для файлов недобавленных в инддекс)
"git restore --staged 'name'" - отменяет индексацию файла или папки.
//При удалении файла или папки ее название тоже нужно указывать в индекс (git add), если нужно создать коммит с отсутствующим файлом или директорией
"git diff" - показывает изменения между последник коммитом и текущем состоянием рабочей дирикторией (если они НЕ добавлены в индекс) (При запуске программы для перемещения по данным "f"-вниз, "b"или"u"-вверх, "q"-выход)
"git diff --staged" - показывает изменения между последник коммитом и текущем состоянием рабочей дирикторией (если они добавлены в индекс)
"git log" - показывает список всех выполненных коммитов (идентификатор, кто изменил, Дата изменения) ("f"-вниз, "b"или"u"-вверх, "q"-выход)
"git log -p" - показывает список всех выполненных коммитов (идентификатор, кто изменил, Дата изменения) + (все изменения(diff) между коммитами) ("f"-вниз, "b"или"u"-вверх, "q"-выход)
"git log --oneline" - показывает список всех выполненных коммитов (идентификатор + message))
"git log --graph" - Неполный вывод, чтобы не отвлекаться от сути.
"git log --stat" - Сокращенная статистика.
"git log --pretty=" - меняет формат вывода(после равно можно указать oneline,short, full, fuller).
~git log --pretty=format:"%h - %an, %ar : %s"~ - можно задать свой формат вывода статистики.

          Полезные опции для git log --pretty=format
           Опция     Описания вывода
            %H         Хеш коммита
            %h         Сокращенный хеш коммита
            %T         Хеш дерева
            %t         Сокращенный хеш дерева
            %P         Хеш родителей
            %p         Сокращенный хеш родителей
            %an        Имя автора
            %ae        Электронная почта автора
            %ad        Дата автора (формат даты можно задать опцией --date=option)
            %ar        Относительная дата автора
            %cn        Имя коммитера
            %ce        Электронная почта коммитера
            %cd        Дата коммитера
            %cr        Относительная дата коммитера
            %s         Содержание

          Наиболее распространенные опции для команды git log
           Опция               Описание
            -p                  Показывает патч для каждого коммита.
            --stat              Показывает статистику измененных файлов для каждого коммита.
            --shortstat         Отображает только строку с количеством изменений/вставок/удалений для команды --stat.
            --name-only         Показывает список измененных файлов после информации о коммите.
            --name-status       Показывает список файлов, которые добавлены/изменены/удалены.
            --abbrev-commit     Показывает только несколько символов SHA-1 чек-суммы вместо всех 40.
            --relative-date     Отображает дату в относительном формате (например, "2 weeks ago") вместо стандартного формата даты.
            --graph             Отображает ASCII граф с ветвлениями и историей слияний.
            --pretty            Показывает коммиты в альтернативном формате. Возможные варианты опций: oneline, short, full, fuller и format (с помощью последней опции вы можете указать свой формат).

"git reflog" - выводит список всех коммитов с историей удаления и редактирования
"git show 'идентификатор'" - показывает (идентификатор, кто изменил, Дата изменения + diff) для заданного коммита идентификатором (достаточно 7 символом для уникальности)
"git blame 'file_Name'" - выводит (Часть идентификатора, Имя редактора, Даты и изменения) со всеми изменениями для введенного файла
"git grep 'text --'" - находит файлы, в которых встречается совпадение с text
"git grep -i 'text'" - (без учета регистра) находит файлы, в которых встречается совпадение с text
"git grep 'text' 'commit'" - находит файлы в заданном коммите (достаточно 7 символов), в которых встречается совпадение с text
"git grep 'text' $(git rev-list --all)" - находит файлы, в которых встречается совпадение с text по всей истории репозитория (работает только в PowerShell или Линукс)
"git clean -fd" - удаление всех неотслеживаемых файлов
"git revert 'идентификатор'" удаляет из истории введенный коммит, с эффектом бабочки
"git reset HEAD~n" - удаляет коммиты на n уровней, не затрагивая рабочую дирректорию
"git reset --hard HEAD~n" - удаляет коммиты на n уровней, затрагивая рабочую дирректорию
"git commit --amend" - для добавления индекса в последний коммит (окно редактировая i - редактирование, Esc - перестать редактировать, Shift+ - в конец, :wq - сохранить и выйти)
"git commit --amend --no-edit" - для добавления индекса в последний коммит (без окна редактирования)
"git checkout 'хеш коммита'" - Загружает в рабочую директорию состояние репозитория на момент нужного коммита
"git checkout main" - возврат последнего состояния после Checkout
"git branch" - покажет местонахождение по коммиту
"git branch 'name'" - создает новую ветку
"git checkout -b 'name'" - сразу создает новую ветку и переключается на нее
"git checkout 'name'" - переносит состояние в созданную ветку (далее следует сделать коммит)
"git merge 'name2'" - объеденяет текущую ветку с указанной
"git stash" - прячем изменения (не видит новые файлы, поэтому их  в начале нужно добавить в индекс) //Стэш в Git работает по принципу стека. Он позволяет сохранить внутрь любое количество изменений и восстановить их в обратном порядке
"git stash pop" - востанавливаем изменения. //
"git rm --cached 'name'" - исключение папки или файла из репозитория
"git rebase???" - редактор коммитов, интегрирование комммитов объединение нескольких коммитов, удалени и отмена ???
ИГНОРИРОВАНИЕ ИЗМЕНЕНИЙ (
________________________1. создаем файл '.gitignore' в рабочей дириктории 
________________________2. в каждой строчке добавляем команды игнорировния 
________________________3. Примеры: - 'access.log' - игнорировать файл в любом месте (если добавить в начале '/' то только в рабочей дириктории)
__________________________________  - 'node_modules/' - Игнорируем директорию в любой директории проекта (если добавить в начале '/' то только в рабочей дириктории)
__________________________________  - '/db/*.sqlite3' - Игнорируем все файлы с расширением sqlite3 в директории db (при этом не игнорируются такие же файлы внутри любого вложенного каталога в db)
__________________________________  - 'doc/**/*.txt' - Игнорировать все .txt файлы в каталоге doc/ на всех уровнях вложенности)


ГИТ_ХАБ:
"git remote add origin 'SSH'" - установка связи с удаленным репозиторием
"git branch -M main" - указатель на то какой комит отправить в ГИТ_ХАБ
"git push -u origin main" - отправка коммита с указателем на название 
"git push" - простая отправка коммита (последнего)
"git clone 'SSH'" - клонирование репозитория по SSH (можно сразу без init и др, тк весь репозиторий скопируется) (Если операция совершается первый раз то нужно подвердить yes+Enter)
"git pull --rebase" - загрузка изменений (перед началом работы)
"git pull" - можно и так загрузить, но так хуже???
"git pull origin main" - загрузить все комиты, даже те что создал не я (если создавалась другая ветка, то заменить main на соответствующее название) 
"git fetch" - загружает новые изменения с удаленного репозитория, не изменяя рабочую директорию
///git pull = git fetch + git merge (c рабочей директорией)








ОШИБКИ:
HEAD detached at 7cd2707
nothing to commit, working tree clean   

решение:
git branch temp-branch
git checkout master
git merge temp-branch
git push origin master



