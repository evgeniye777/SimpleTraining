"mkdir 'name'" - новая папка
"cd 'name'" - переход в дирикторию (cd Папка1\Папка2\Папка3)
"cd.." - переход выше по дириктории
"echo 'текст' > 'name'" - создание новой записи в файле или создание нового файла с этой записью
"echo 'текст' >> 'name'" - добавление записи к файлу
"setx 'name' 'text'" - создание переменной среды (-m добавить в конце для системных переменных среды)
"cd '%name%'" - переход в дирикторию по переменной среды
"dir /a" - просмотр содержимого в находящейся дириктории ('ls -a' - для Линукс)
"https://www.celitel.info/klad/nhelp/helpbat.php?dcmd=main" - Полезный справочник
"del 'name'" - удаление файлов в находящейся дириктории (если указать название папки, то папка останется а содержимое удалится)
"rmdir /s" - удаление всей папки и её содержимого (если папка пуста то сработает и без '/s')


ГИТ:
"git --version" - отображает версию ГИТ
"git --config"или"git --info" - информация некоторых команд ГИТ
"git --help"или"git --help -a"или"git --help -g" - информация о подкомандах ГИТ
"git config --global user.name 'name'" - установка имени пользователя дириктории (глобальная настройка (или без '--global')???) (обязатель если отстутствует)
"git config --global user.email 'email'" - установка почты пользователя дириктории (глобальная настройка (или без '--global')???) (обязатель если отстутствует)
"git init" - инициализация гит (в той дириктории где вызвана эта команда)
"git status" - состояние гит
"git add 'name'" - добавление в индекс нового файла или папки для комита (можно указать * или . для всех)
"git commit -m 'label'" - создание коммита для собранного индекса с пометкой
"git commit name -m 'label'" - объедененная команда add и commit (name - название файла или папки, label - название коммита)
"git commit -am 'label'" - объедененная команда 'add .' и commit (name - название файла или папки, label - название коммита) (добавляет в индекс и коммитит сразу все изменения, которы отслеживаются)
"git restore 'name'" - востановление удаленного файла или папки которая удалена (при условии если папка/файл - отслеживаемые (git add)) (можно указать * или . для всех) (Также данная команда отменяет изменения для файлов недобавленных в инддекс)
"git restore --staged 'name'" - отменяет индексацию файла или папки.
//При удалении файла или папки ее название тоже нужно указывать в индекс (git add), если нужно создать коммит с отсутствующим файлом или директорией
"git diff" - показывает изменения между последник коммитом и текущем состоянием рабочей дирикторией (если они НЕ добавлены в индекс) (При запуске программы для перемещения по данным "f"-вниз, "b"или"u"-вверх, "q"-выход)
"git diff --staged" - показывает изменения между последник коммитом и текущем состоянием рабочей дирикторией (если они добавлены в индекс)
"git log" - показывает список всех выполненных коммитов (идентификатор, кто изменил, Дата изменения) ("f"-вниз, "b"или"u"-вверх, "q"-выход)
"git log -p" - показывает список всех выполненных коммитов (идентификатор, кто изменил, Дата изменения) + (все изменения(diff) между коммитами) ("f"-вниз, "b"или"u"-вверх, "q"-выход)
"git log --oneline" - показывает список всех выполненных коммитов (идентификатор + message))
"git reflog" - выводит список всех коммитов с историей удаления и редактирования
"git show 'идентификатор'" - показывает (идентификатор, кто изменил, Дата изменения + diff) для заданного коммита идентификатором (достаточно 7 символом для уникальности)
"git blame 'file_Name'" - выводит (Часть идентификатора, Имя редактора, Даты и изменения) со всеми изменениями для введенного файла
"git grep 'text'" - находит файлы, в которых встречается совпадение с text
"git grep -i 'text'" - (без учета регистра) находит файлы, в которых встречается совпадение с text
"git grep 'text' 'commit'" - находит файлы в заданном коммите (достаточно 7 символов), в которых встречается совпадение с text
"git grep 'text' $(git rev-list --all)" - находит файлы, в которых встречается совпадение с text по всей истории репозитория (работает только в PowerShell или Линукс)
"git clean -fd" - удаление всех неотслеживаемых файлов
"git revert 'идентификатор'" удаляет из истории введенный коммит, с эффектом бабочки
"git reset HEAD~n" - удаляет коммиты на n уровней, не затрагивая рабочую дирректорию
"git reset --hard HEAD~n" - удаляет коммиты на n уровней, затрагивая рабочую дирректорию
"git commit --amend" - для добавления индекса в последний коммит (окно редактировая i - редактирование, Esc - перестать редактировать, Shift+ - в конец, :wq - сохранить и выйти)
"git commit --amend --no-edit" - для добавления индекса в последний коммит (без окна редактирования)



ГИТ_ХАБ:
"git remote add origin 'SSH'" - установка связи с удаленным репозиторием
"git branch -M main" - указатель на то какой комит отправить в ГИТ_ХАБ
"git push -u origin main" - отправка коммита с указателем на название 
"git push" - простая отправка коммита (последнего)
"git clone 'SSH'" - клонирование репозитория по SSH (можно сразу без init и др, тк весь репозиторий скопируется) (Если операция совершается первый раз то нужно подвердить yes+Enter)
"git pull --rebase" - загрузка изменений (перед началом работы)
"git pull" - можно и так загрузить, но так хуже???



